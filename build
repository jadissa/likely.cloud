
#
# ________                              .____                    .___
# \______ \_______  ____ _____    _____ |    |    ____  __ __  __| _/
#  |    |  \_  __ _/ __ \\__  \  /     \|    |   /  _ \|  |  \/ __ | 
#  |    `   |  | \\  ___/ / __ \|  Y Y  |    |__(  <_> |  |  / /_/ | 
# /_______  |__|   \___  (____  |__|_|  |_______ \____/|____/\____ | 
#         \/           \/     \/      \/        \/                \/ 
#
#                                                              © 2017

#!/bin/bash
#https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-centos-7

_user_mod() {

    echo ' ________                              .____                    .___'

    echo '\______ \_______  ____ _____    _____ |    |    ____  __ __  __| _/'

    echo ' |    |  \_  __ _/ __ \\__  \  /     \|    |   /  _ \|  |  \/ __ |'

    echo ' |    `   |  | \\  ___/ / __ \|  Y Y  |    |__(  <_> |  |  / /_/ |'

    echo '/_______  |__|   \___  (____  |__|_|  |_______ \____/|____/\____ |'

    echo '        \/           \/     \/      \/        \/                \/'

    echo 

    echo '                                                              © 2017'

    echo 'This script will check for needed configurations per run'

    echo 'Do you agree?'

    echo 'OK, Y/N'

    read CHOICE

    if [ "$CHOICE"!="Y" ]; then

        echo 'Exiting...'

        exit 1

    fi

    USER=`whoami`

    if [ "$USER"!="root" ]; then

        echo 'You must run this script as root'

        exit 1

    fi

    echo 'What username do you wish to go by?'

    read DEVELOPER

    echo "You chose $DEVELOPER, is that correct?"

    echo 'OK, Y/N'

    read CHOICE

    if [ "$CHOICE"!="Y" ]; then

        _user_mod

    fi


    #
    # Prelims
    #
    . /etc/os-release

    ID=$ID

    VER=$VERSION_ID

    PRIVATE_IP_ADDRESS`curl -w "\n" http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address`

    GROUP=www

    if [ "$ID"!="centos" ] || [ "$VER"!="7" ]; then

        echo 'CentOS 7 required, exiting...'

        exit 1

    fi

    if [ ! $(getent group www) ]; then

        sudo groupadd www

        sudo useradd www -g wheel

    fi


    #
    # User specific
    #
    echo "Great to meet you $DEVELOPER, we're installing now..."

    sudo useradd $DEVELOPER -g www -m

    sudo usermod -a -G wheel username

}

_deploy_key() {

    echo 'What is your email address?'

    read EMAIL 

    echo "Generate key for $EMAIL?"

    echo 'OK, Y/N'

    read CHOICE

    if [ "$CHOICE"!="Y" ]; then

        _deploy_key

    fi

    sudo -u $DEVELOPER ssh-keygen -t rsa -b 4096 -C "$EMAIL"

    sudo -u $DEVELOPER eval "$(ssh-agent -s)"

    sudo -u $DEVELOPER ssh-add -k ~/.ssh/id_rsa

}

_web_root() {

    if [ "$PROJECTPATH"=="" ]; then

        echo 'What is your project path?'

        read CHOICE

        if [ -d $CHOICE ]; then

            echo "Already exists, $CHOICE"

            NOTEXISTPROJECT=N

            _project

        else

            echo "Installing $CHOICE..."

            PROJECTPATH=$CHOICE

            echo 'OK, Y/N'

            read CHOICE

            if [ "$CHOICE"!="Y" ]; then

                sudo mkdir -p $PROJECTPATH

                echo "export PATH=$PROJECTPATH:$PATH" >>~/.bashrc

                source ~/.bashrc
                
            fi

            NOTEXISTPROJECT=Y

            _project

        fi
        
    fi

}

_project() {

    echo "Configuring $PROJECTPATH..."

    sudo chmod -R 0775 $PROJECTPATH

    #
    # Checkout project
    #
    # Our project already exists so, not adding here 

    sudo chown -R wheel:$GROUP

    sudo chmod -R 0755 $PROJECTPATH

    stat -c "Rights: %A Perms: %a Username:Owner: %U:%G File: %n Type: %F Bytes: %s" $PROJECTPATH

    #
    # Get dependencies
    #
    cd /tmp

    sudo yum -y update

    sudo yum -y install nginx wget http-server libicu-dev epel-release policycoreutils-python net-tools git vim 

    sudo yum -y groupinstall 'Development Tools'

    sudo yum -y install gcc-c++ make

    sudo curl -sL https://rpm.nodesource.com/setup_8.x | sudo -E bash -

    sudo yum install -y nodejs

    which node

    node -v

    npm -v

    sudo npm install -g forever

    sudo systemctl start nginx

    sudo systemctl enable nginx

    sudo npm install -g pm2@latest -g http-server

    sudo wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo

    cd $PROJECT_PATH

    #
    # Install node dependencies 
    #
    if [ "$NOTEXISTPROJECT"=="Y" ]; then

        sudo yarn install

    else 

        if [ -f ./package.json ]; then

            sudo yarn upgrade

        else 

            sudo yum -y install yarn

            sudo yarn install

        fi

    fi

}

_pm2() {

    #
    # Manage pm2
    #
    PM2PROCESSLIST=`pm2 jlist`
    
    PROCESS_NAME=`pm2 id discord-token-generator`

    if [ $PROCESS_NAME!="discord-token-generator" ]; then

    #    mkdir -p $PROJECTPATH/.pm2/logs

    #    sudo chown -R root:www $PROJECTPATH/.pm2/logs

    #    sudo pm2 --log $PROJECTPATH/.pm2/logs --output $PROJECTPATH/.pm2/logs/output.log --error $PROJECTPATH/.pm2/logs/error.log --pid $PROJECTPATH/.pm2/p.id logrotate tart node_modules/discord-token-generator/server.js --name discord-token-generator

        pm2 start

        pm2 ls

        pm2 save

        sudo chown -R $www:www ~/.pm2

        pkill -f PM2

        pm2 resurrect

        pm2 logs -h

        pm2 logs --raw discord-token-generator

    else

        pm2 ls 

        pm2 logs --nostream

        #pm2 logs

    fi

}



_nginx() {

    #
    # Configure nginx
    #
    cp /usr/share/nginx/html/404.html .

    cp /usr/share/nginx/html/50x.html .

    sudo chmod -R 0755 .

    sudo chown -R www:wheel $PROJECTPATH

    sudo mkdir /etc/nginx/conf.d/

    WORKER_PROCESS=`sudo grep -c 'model name' /proc/cpuinfo`

    sudo cat << EOF > /etc/nginx/conf.d/likely.conf
    server {

        listen       80;
        server_name  likely.cloud www.likely.cloud;

        location / {
            root   $PROJECTPATH;
            index  index.html;
            try_files $uri $uri/ =404;
        }    
       
        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   html;
        }

    }
    EOL

    sudo chmod -R 0766 /var/log/nginx

    sudo chown -R nginx:nginx /var/log/nginx

    sudo touch /run/nginx.pid

    sudo chown nginx:nginx /run/nginx.pid

    PRIVATE_IP_ADDRESS=`curl -s -w "\n" http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address`

    sudo systemctl start nginx

    sudo systemctl restart nginx

    sudo /etc/nginx/nginx.conf

    sudo cat /var/log/nginx/error.log

    # Fix the permission issue that prevents nginx from running
    sudo setenforce Permissive

    sudo chcon -Rt httpd_sys_content_t /var/www/html

    sudo setenforce Enforcing

    sudo systemctl restart nginx

}

_tests() {

    #
    # Globally install react for UI
    #
    #cd /var/www/html

    #sudo npm install -g react-composer create-react-app

    #create-react-app app


    ##
    ## Head back to project root
    ##
    #cd ../..


    ##
    ## Install mongodb
    ##
    #npm install 

    ## https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-centos-7
    #sudo yum -y install mongodb-org

    #sudo systemctl start mongod

    #cd tests

    #node create_mongodb.js

    #npm install mongoose --save

    #npm install body-parser --save


    ##
    ## Configure mongodb
    ##
    #mongod --port 27017 --dbpath /var/lib/mongo

    #sudo systemctl start mongod


    #use likelycloud


    #
    # Tests
    #
    netstat -tln
    pm2 status

    sudo nginx -t

    pm2 start tests/server.js
    curl http://$PRIVATE_IP_ADDRESS:8080
    pm2 stop tests/server.js

    sudo systemctl status nginx

}

fun() {

    _user_mod

    _deploy_key

    _web_root

    _project

    _pm2

    _nginx

    _tests

}

fun