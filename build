#!/bin/bash
#
# ________                              .____                    .___
# \______ \_______  ____ _____    _____ |    |    ____  __ __  __| _/
#  |    |  \_  __ _/ __ \\__  \  /     \|    |   /  _ \|  |  \/ __ | 
#  |    `   |  | \\  ___/ / __ \|  Y Y  |    |__(  <_> |  |  / /_/ | 
# /_______  |__|   \___  (____  |__|_|  |_______ \____/|____/\____ | 
#         \/           \/     \/      \/        \/                \/ 
#
#                             © likely.cloud and Jadissa Griffin 2018

#https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-centos-7

#
# Load
#
. /etc/os-release

ID=$ID

VER=$VERSION_ID

PROJECTPATH=/var/www/html

PRIVATE_IP_ADDRESS=`curl -w "\n" http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address`

GROUP=www

USER=www

_init() {

    echo '.__  .__ __          .__            _________ .__                   .___'

    echo '|  | |__|  | __ ____ |  | ___.__.   \_   ___ \|  |   ____  __ __  __| _/'

    echo '|  | |  |  |/ _/ __ \|  |<   |  |   /    \  \/|  |  /  _ \|  |  \/ __ | '

    echo '|  |_|  |    <\  ___/|  |_\___  |   \     \___|  |_(  <_> |  |  / /_/ | '

    echo '|____|__|__|_ \\___  |____/ ____| /\ \______  |____/\____/|____/\____ | '

    echo '             \/    \/     \/      \/        \/                       \/ '

    echo 

    echo '                                  © likely.cloud and Jadissa Griffin 2018'

    echo

    echo 'This script will check for needed configurations per run'

    echo 'Create the following:'

    echo "Project directory:    $PROJECTPATH"

    echo "Group:                $GROUP"

    USER=`whoami`

    if [ "$USER" != "root" ]; then

        echo 'You must run this script as root'

        exit 1

    fi

    echo 'Do you agree?'

    echo 'OK, Y/N'

    read CHOICE

    if [ "$CHOICE" != "Y" ]; then

        echo 'Exiting...'

        exit 1

    fi

    if [ "$ID" != "centos" ] || [ "$VER" != "7" ]; then

        echo 'CentOS 7 required, exiting...'

        exit 1

    fi

}

_dependencies() {

    GROUP_EXISTS=`cat /etc/group | grep $GROUP`

    if [ "$GROUP_EXISTS" == "" ]; then

        sudo groupadd $GROUP

        sudo useradd $GROUP -g wheel

    fi

    #
    # Get dependencies
    #
    echo 'Installing preliminary updates...'

    cd /tmp

    sudo yum -y update

    sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

    sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm

    sudo yum-config-manager --enable remi-php72

    curl 'https://setup.ius.io/' -o setup-ius.sh

    sudo bash setup-ius.sh

    sudo yum -y install yum-utils nginx mod_php70u php70u-cli php70u-mysqlnd php70u-fpm php70u-mcrypt mariadb-server mariadb wget http-server libicu-dev epel-release policycoreutils-python net-tools git vim mlocate

    sudo yum -y groupinstall 'Development Tools'

    sudo yum -y install gcc-c++ make

    sudo systemctl start nginx

    sudo systemctl enable nginx

    echo "Configuring $PROJECTPATH..."

    sudo mkdir -p $PROJECTPATH

    echo "export PATH=$PROJECTPATH:$PATH" >>~/.bashrc

    source ~/.bashrc

    sudo chmod -R 0775 $PROJECTPATH

    sudo chown -R $GROUP:$GROUP $PROJECTPATH

    #
    # Checkout project
    #
    # Our project already exists so, not adding here 

    stat -c "Rights: %A Perms: %a Username:Owner: %U:%G File: %n Type: %F Bytes: %s" $PROJECTPATH

    cd $PROJECTPATH

    #
    # Install node dependencies 
    #
    #if [ -f ./package.json ]; then



    #fi

    # Firewall stuff
    sudo firewall-cmd

    sudo firewall-cmd --permanent --zone=public --add-service=http

    sudo firewall-cmd --permanent --zone=public --add-service=https

    sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent

    sudo firewall-cmd --reload

    # Configure mariadb
    sudo systemctl start mariadb

    sudo mysql_secure_installation

    sudo systemctl enable mariadb

    sudo chkconfig mariadb on

    #
    # Configure nginx
    #
    if [ ! -d /etc/nginx/conf.d/ ]; then

        sudo mkdir /etc/nginx/conf.d/

    fi

    WORKER_PROCESS=`sudo grep -c 'model name' /proc/cpuinfo`

    sudo cat << EOF > /etc/nginx/nginx.conf
    worker_processes  ${WORKER_PROCESS};

    pid        /run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {

        ##
        # Basic Settings
        ##
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # Logging Settings
        ##
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##
        gzip on;
        gzip_disable "msie6";

        #include /etc/nginx/conf.d/*.conf;

        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name _;

            root /var/www/html;

            location / {
            }

        }

    }
EOF

    sudo cat << EOF > /etc/nginx/conf.d/likely.conf
    server {
        listen 80;
        listen [::]:80;
        server_name likely.cloud;

        location / {
            proxy_pass "http://localhost:50451/";
            proxy_set_header Host ${host};
            proxy_set_header X-Real-IP ${remote_addr};
        }

        location /api/discord/login {
            proxy_pass "http://localhost:50452/";
            proxy_set_header Host ${host};
            proxy_set_header X-Real-IP ${remote_addr};
        }

    }
EOF

    sudo nginx -t

    sudo chmod -R 0766 /var/log/nginx

    sudo chown -R nginx:nginx /var/log/nginx

    sudo touch /run/nginx.pid

    sudo chown nginx:nginx /run/nginx.pid

    PRIVATE_IP_ADDRESS=`curl -s -w "\n" http://169.254.169.254/metadata/v1/interfaces/private/0/ipv4/address`

    sudo systemctl restart nginx

    sudo cat /etc/nginx/nginx.conf

    sudo cat /var/log/nginx/error.log

    sudo setenforce Permissive

    sudo chcon -Rt httpd_sys_content_t $PROJECTPATH

    sudo setenforce Enforcing

    setsebool -P httpd_can_network_connect true

    sudo systemctl restart nginx

    sudo systemctl enable nginx

}

_tests() {

    #cd $PROJECTPATH

    netstat -tln

    sudo nginx -t

    curl http://$PRIVATE_IP_ADDRESS:80

    sudo systemctl status nginx

    php -v

}

_build() {

    echo "Installing Composer..."

    curl -sS https://getcomposer.org/installer | php -- --install-dir=.

    echo "Updating Composer..."

    php composer.phar selfupdate

    echo "Running Composer..."

    php composer.phar update

    php composer.phar dumpautoload -o

    php composer.phar install

}

fun() {

    _init

    _dependencies

    _tests

    _build

}

fun